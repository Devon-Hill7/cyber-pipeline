/**
 * @swagger
 * tags:
 *   name: Districts
 *   description: Districts API
 */

// Load Libraries
const express = require('express')
const router = express.Router()

// Load Middleware
const adminOnly = require('../../middlewares/admin-only')

// Load Models
const District = require('../../models/district')

/**
 * @swagger
 * /api/v1/districts:
 *   get:
 *     summary: <admin> list all the districts
 *     tags: [Districts]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: the list of districts
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/District'
 */
router.get('/', async function (req, res, next) {
  let districts = await District.query()
    .select(
      'districts.id',
      'districts.name',
      'districts.usd',
      'districts.url',
      'districts.rural',
      'districts.urban',
      'districts.suburban',
      'districts.town',
      'districts.notes'
    )
    .withGraphJoined('teachers')
    .modifyGraph('teachers', (builder) => {
      builder.select('teachers.id', 'teachers.name')
    })
  res.json(districts)
})

/**
 * @swagger
 * /api/v1/districts:
 *   put:
 *     summary: <admin> create district
 *     tags: [Districts]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       description: district
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 minLength: 1
 *                 maxLength: 255
 *                 description: the name of the district
 *               usd:
 *                 type: integer
 *                 description: the USD number of the district
 *               url:
 *                 type: string
 *                 format: uri
 *                 description: the district's website URL
 *               rural:
 *                 type: boolean
 *                 description: is the district rural?
 *               urban:
 *                 type: boolean
 *                 description: is the district urban?
 *               suburban:
 *                 type: boolean
 *                 description: is the district suburban?
 *               town:
 *                 type: boolean
 *                 description: is the district a town?
 *               notes:
 *                 type: string
 *                 description: any notes about the district
 *               teachers:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: integer
 *                       description: autogenerated id
 *             example:
 *               name: School District
 *               usd: 123
 *               url: https://www.usd123.local/
 *               rural: 0
 *               urban: 1
 *               suburban: 0
 *               town: 0
 *               notes: This is a test district
 *               teachers:
 *                 - id: 1
 *     responses:
 *       200:
 *         $ref: '#/components/responses/Success'
 *       422:
 *         $ref: '#/components/responses/UpdateError'
 */
router.put('/', adminOnly, async function (req, res, next) {
  try {
    // strip out other data from teachers
    const teachers = req.body.district.teachers.map(({ id, ...next }) => {
      return {
        id: id,
      }
    })
    await District.query().upsertGraph(
      {
        name: req.body.district.name,
        url: req.body.district.url,
        usd: req.body.district.usd,
        rural: req.body.district.rural,
        urban: req.body.district.urban,
        suburban: req.body.district.suburban,
        town: req.body.district.town,
        notes: req.body.district.notes,
        teachers: teachers,
      },
      {
        relate: true,
        unrelate: true,
      }
    )
    res.status(200)
    res.json({ message: 'District Saved' })
  } catch (error) {
    res.status(422)
    res.json(error)
  }
})

/**
 * @swagger
 * /api/v1/districts/{id}:
 *   post:
 *     summary: <admin> create district
 *     tags: [Districts]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: district ID
 *     requestBody:
 *       description: district
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               id:
 *                 type: integer
 *                 description: autogenerated id
 *               name:
 *                 type: string
 *                 minLength: 1
 *                 maxLength: 255
 *                 description: the name of the district
 *               usd:
 *                 type: integer
 *                 description: the USD number of the district
 *               url:
 *                 type: string
 *                 format: uri
 *                 description: the district's website URL
 *               rural:
 *                 type: boolean
 *                 description: is the district rural?
 *               urban:
 *                 type: boolean
 *                 description: is the district urban?
 *               suburban:
 *                 type: boolean
 *                 description: is the district suburban?
 *               town:
 *                 type: boolean
 *                 description: is the district a town?
 *               notes:
 *                 type: string
 *                 description: any notes about the district
 *               teachers:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: integer
 *                       description: autogenerated id
 *             example:
 *               id: 1
 *               name: School District
 *               usd: 123
 *               url: https://www.usd123.local/
 *               rural: 0
 *               urban: 1
 *               suburban: 0
 *               town: 0
 *               notes: This is a test district
 *               teachers:
 *                 - id: 1
 *     responses:
 *       200:
 *         $ref: '#/components/responses/Success'
 *       422:
 *         $ref: '#/components/responses/UpdateError'
 */
router.post('/:id', adminOnly, async function (req, res, next) {
  try {
    // strip out other data from teachers
    const teachers = req.body.district.teachers.map(({ id, ...next }) => {
      return {
        id: id,
      }
    })
    await District.query().upsertGraph(
      {
        id: req.params.id,
        name: req.body.district.name,
        url: req.body.district.url,
        usd: req.body.district.usd,
        rural: req.body.district.rural,
        urban: req.body.district.urban,
        suburban: req.body.district.suburban,
        town: req.body.district.town,
        notes: req.body.district.notes,
        teachers: teachers,
      },
      {
        relate: true,
        unrelate: true,
      }
    )
    res.status(200)
    res.json({ message: 'District Saved' })
  } catch (error) {
    res.status(422)
    res.json(error)
  }
})

/**
 * @swagger
 * /api/v1/districts/{id}:
 *   delete:
 *     summary: <admin> delete district
 *     tags: [Districts]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: district ID
 *     responses:
 *       200:
 *         $ref: '#/components/responses/Success'
 *       422:
 *         $ref: '#/components/responses/UpdateError'
 */
router.delete('/:id', adminOnly, async function (req, res, next) {
  try {
    var deleted = await District.query().deleteById(req.params.id)
    if (deleted === 1) {
      res.status(200)
      res.json({ message: 'District Deleted' })
    } else {
      res.status(422)
      res.json({ error: 'District Not Found' })
    }
  } catch (error) {
    res.status(422)
    res.json(error)
  }
})

module.exports = router
